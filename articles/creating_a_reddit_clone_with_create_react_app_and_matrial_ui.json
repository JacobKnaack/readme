{
  "id": 3,
  "created_on": "May 6 2018",
  "name": "Creating a Reddit Clone with create-react-app and material-ui",
  "description": "Using React and Material UI to create an interface that fetches data from reddit and displays it posts and comments to the user.",
  "next": null,
  "prev": null,
  "html": "<p class='subtitle'>This tutorial will walk you through the basics of using create-react-app to build a simple front end application that fetches data from reddit, and displays front page posts in a clean and simple user inferface, bootstrapped with Material UI.</p><p>Before we get started we need to make sure we have the required software, here's what we'll need: </p><ul class='articleList'><li>A recent version of <a target='_blank' href='https://nodejs.org/en/'>Node JS</a>.</li><li>Access to a command line (Terminal on Mac / Linux or Command Prompt on Windows).</li></ul><p>With these installed we can begin!</p><div class='divider'></div><h3 class='contentHeading'>Setting up our Project with the Command Line</h3><p>With Node installed we can start setting up our project.  First we'll use the Node Package Manager to install <a href='https://github.com/facebook/create-react-app/blob/master/README.md#getting-started' target='_blank'>create-react-app</a>: a straightforward tool that will let us jump straight into developing with React.</p><p>In your command line, type this command and press enter: <code class='codeBlock'>npm install -g create-react-app</code></li></p><p>Once the script finishes the installation we can create our React project with no configuration!<p/><p>Simply type this command into your terminal to create a React Project named reddit-clone:<code class='codeBlock'>create-react-app reddit-clone</code></p><p>This script will take a while to create our source files, but once it's completed we will see a new folder created in our directory called <code>reddit-clone</code>.  Opening this folder will reveal our initialized ReactJS project complete with scripts for running and building our project if we want to deploy on the web.  You should see something like this:</p><img class='screenshot' src='../asset/screenshots/3/project-directory.png'><p>At this point we can navigate to this folder in our terminal by typing this command and hitting enter:<code class='codeBlock'>cd reddit-clone</code></p><p>Now let's run a script to start a development server compiling out project and opening it in our browser:<code class='codeBlock'>npm start</code></p><p>Your browser should open up with a URL pointed at your computer's local IP addess and port. You should see something like this:</p><img class='screenshot' src='../asset/screenshots/3/npm-start.png'><p>We are now ready to open up our text editor and begin building our App!</p><div class='divider'></div><h3 class='contentHeading'>Building the Reddit Front Page</h3><p>Open up the project directory in your text editor and find <code>App.js</code> in the <code>src</code> directory. You will see these lines:</p><h4 class='codeTitle'>App.js</h4><code class='codeBlock prettyprint linenums'>import React, { Component } from 'react'; <br>import logo from './logo.svg';<br>import './App.css';<br><br>class App extends Component {<br>&nbsp render() {<br>&nbsp &nbsp return (<br>&nbsp &nbsp &nbsp &ltdiv className='App'&gt<br>&nbsp &nbsp &nbsp &nbsp &ltheader className='App-header'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &ltimg src={logo} className='App-logo' alt='logo'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &lth1 className='App-title' &gtWelcome to React&lt/h1&gt <br> &nbsp &nbsp &nbsp &nbsp &lt/header&gt <br>&nbsp &nbsp &nbsp &nbsp &ltp className='App-intro'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp To get started, edit &ltcode&gtsrc/App.js&lt/code&gt and save to reload.<br>&nbsp &nbsp &nbsp &nbsp &lt/p&gt<br>&nbsp &nbsp &nbsp &lt/div&gt<br>&nbsp &nbsp );<br>&nbsp }<br>}<br><br>export default App;</code><p>This is all of the content that is being served in the application created by create-react-app.  Let's delete lines 13 through 15. As well as replace the title on line 11 from <code>Welcome to React</code> to <code>Reddit Clone</code>.</p><p>This will clear out the default content and leave us a blank slate to put our own content in.  We also changed the title to our application's name. Now let's discuss the first step of creating our Reddit clone: getting post data from Reddit.</p><p>Luckily for us Reddit gives us an easy way to interact with it's data. simply making an HTTP request to <a href='http://reddit.com/.json' target='_blank'>http://reddit.com/.json</a> will give us all the data from reddit's front page as a json object. This way we can easily create our own React UI components in real time from Reddit's data.</p><p>In order to make use of this data we'll have to modify our App.js component.  We need to add 2 important things:</p><ul class='articleList'><li>Add a constructor and <code>this.state</code>.</li><li>Create a function that will save reddit's data to <code>this.state</code> when our component loads.</li></ul><p>Let's go back to <code>App.js</code> and initialize our component with a constructor and <code>this.state</code>:</p><h4 class='codeTitle'>App.js</h4><code class='codeBlock prettyprint linenums'>import React, { Component } from 'react'; <br>import logo from './logo.svg';<br>import './App.css';<br><br>class App extends Component {<br>&nbsp constructor() {<br>&nbsp &nbsp super()<br>&nbsp &nbsp this.state = {<br>&nbsp &nbsp &nbsp posts: [],<br>&nbsp &nbsp }<br>&nbsp }<br></code><p class='codeComment'><em>// This constructor is used to intialize our component with data before it renders in the browser.  For us we want to add an object called this.state and add an empty array that we will fill with posts once we fetch the data from reddit.  At the beginning of our constructor we call the super() method.  this gives us access to the global 'this' object which we can now use to refer to our App component.</em></p><p>Now let's add a component lifecycle function to fetch our reddit data from reddit.com:</p><h4 class='codeTitle'>App.js</h4><code class='codeBlock prettyprint linenums'>import React, { Component } from 'react'; <br>import logo from './logo.svg';<br>import './App.css';<br><br>class App extends Component {<br>&nbsp constructor() {<br>&nbsp &nbsp super()<br>&nbsp &nbsp this.state = {<br>&nbsp &nbsp &nbsp posts: [],<br>&nbsp &nbsp }<br>&nbsp }<br><br>&nbsp componentWillMount() {<br>&nbsp &nbsp fetch('https://www.reddit.com/.json')<br>&nbsp &nbsp .then(res => res.json())<br>&nbsp &nbsp .then(postData => {<br>&nbsp &nbsp &nbsp &nbsp this.setState({ posts: postData.data.children })<br>&nbsp &nbsp &nbsp })<br>&nbsp &nbsp .catch(error => alert('failed to fetch reddit data'))<br>&nbsp }</code><p class='codeComment'><em>// This method: componentWillMount, is a built in method that React components have access to. It will run whatever logic is put within it before the component has mounted in the browser and thus we can make changes to our component before anything is rendered to the screen.</em></p><p>On line 14 we are using the <a href='https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API' target='_blank'>fetch API</a> to make an http request to reddit.com/.json.  By default this will be a GET request unless otherwise specified. It is impotant to note that this API call returns a promise, so we must use javascript's <code>.then</code> <code>.catch</code> syntax to handle this API call asynchronously. Let's take a closer look to see what's happening:</p><code class='codeBlock prettyprint linenums:15'>&nbsp &nbsp .then(res => res.json())</code><p class='codeComment'><em>// the fetch call returns a response object (which we define as res) and needs to be converted into a parseable object. We can use the <code>.json()</code> method that fetch gives us to convert the response into json data.</em></p><code class='codeBlock prettyprint linenums:16'>&nbsp &nbsp .then(postData => {<br>&nbsp &nbsp &nbsp &nbsp this.setState({ posts: postData.data.children })<br>&nbsp &nbsp &nbsp })<br></code><p class='codeComment'><em>// The <code>.json()</code> method returns another promise so we have to chain another <code>.then</code>.  This will return our json data if when the promise resolves. Now we can set the state of our component so we have direct access to our reddit data.</em></p><p>With our data safe and sound in our app's state. Let's install material-ui and create our material design components. Make sure you are still in your <code>reddit-clone</code> project directory and run this comand in your terminal:<code class='codeBlock'>npm install --save material-ui</code></p><p>This will install material-ui components to our projects dependencies and allow us to use them in our jsx.  Let's import this libray of code into our App and configure our component to be able to use material-ui themes:</p><h4 class='codeTitle'>App.js</h4><code class='codeBlock prettyprint linenums'>import React, { Component } from 'react'; <br>import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';<br>import logo from './logo.svg';<br>import './App.css';<br><br>class App extends Component {<br>&nbsp constructor() {<br>&nbsp &nbsp super()<br>&nbsp &nbsp this.state = {<br>&nbsp &nbsp &nbsp posts: [],<br>&nbsp &nbsp }<br>&nbsp }<br><br>&nbsp componentWillMount() {<br>&nbsp &nbsp fetch('https://www.reddit.com/.json')<br>&nbsp &nbsp .then(res => res.json())<br>&nbsp &nbsp .then(postData => {<br>&nbsp &nbsp &nbsp &nbsp this.setState({ posts: postData.data.children })<br>&nbsp &nbsp &nbsp })<br>&nbsp &nbsp .catch(error => alert('failed to fetch reddit data'))<br>&nbsp }<br><br>&nbsp render() {<br>&nbsp &nbsp return (<br>&nbsp &nbsp &nbsp &ltMuiThemeProvider&gt<br>&nbsp &nbsp &nbsp &nbsp &ltdiv className='App'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &ltheader className='App-header'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &ltimg src={logo} className='App-logo' alt='logo'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &lth1 className='App-title' &gtReddit Clone&lt/h1&gt <br>&nbsp &nbsp &nbsp &nbsp &nbsp &lt/header&gt <br>&nbsp &nbsp &nbsp &nbsp &lt/div&gt<br>&nbsp &nbsp &nbsp &lt/MuiThemeProvider&gt<br>&nbsp &nbsp );<br>&nbsp }<br>}<br><br>export default App;</code><p class='codeComment'><em>// You can see that we added an import statement on line 2 and wrapped our jsx in the imported theme provider (lines 24 and 31).</em></p><p>Now let's create a React component that will render our post data stored in <code>this.state</code>.  We'll start by creating a folder within the <code>src</code> directory called <code>components</code>.  Then we will create a file called <code>Post.js</code>. Initialize the component with this code:</p><h4 class='codeTitle'>/components/Post.js</h4><code class='codeBlock prettyprint linenums'>import React from 'react'<br>import Avatar from 'material-ui/Avatar'<br>import FlatButton from 'material-ui/FlatButton'<br>import { Card, CardHeader, CardMedia, CardText } from 'material-ui/Card'<br><br>const Post = (props) => {<br>&nbsp return (<br>&nbsp &nbsp &ltdiv /&gt<br>&nbsp )<br>}<br><br>export default PostCard</code><p class='codeComment'><em>// Unlike our app component we don't define a class that is a React.Component.  Instead we are using a simpler syntax, implementing a stateless React component that can't be intialized with a constructor.</em></p><p>With our Post component created we can import it into <code>App.js</code> and pass in our post data:</p><h4 class='codeTitle'>App.js</h4><code class='codeBlock prettyprint linenums'>import React, { Component } from 'react'; <br>import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';<br>import Post from './components/Post';<br>import logo from './logo.svg';<br>import './App.css';<br><br>class App extends Component {<br>&nbsp constructor() {<br>&nbsp &nbsp super()<br>&nbsp &nbsp this.state = {<br>&nbsp &nbsp &nbsp posts: [],<br>&nbsp &nbsp }<br>&nbsp }<br><br>&nbsp componentWillMount() {<br>&nbsp &nbsp fetch('https://www.reddit.com/.json')<br>&nbsp &nbsp .then(res => res.json())<br>&nbsp &nbsp .then(postData => {<br>&nbsp &nbsp &nbsp &nbsp this.setState({ posts: postData.data.children })<br>&nbsp &nbsp &nbsp })<br>&nbsp &nbsp .catch(error => alert('failed to fetch reddit data'))<br>&nbsp }<br><br>&nbsp render() {<br>&nbsp &nbsp return (<br>&nbsp &nbsp &nbsp &ltMuiThemeProvider&gt<br>&nbsp &nbsp &nbsp &nbsp &ltdiv className='App'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &ltheader className='App-header'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &ltimg src={logo} className='App-logo' alt='logo'&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &lth1 className='App-title' &gtReddit Clone&lt/h1&gt <br> &nbsp &nbsp &nbsp &nbsp &nbsp &lt/header&gt <br> &nbsp &nbsp &nbsp &nbsp &nbsp {this.state.posts.map(post => {<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp let imageUrl = 'https://image.flaticon.com/icons/svg/149/149930.svg'<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp if (post.data.preview) {<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp imageUrl = post.data.preview.images[0].source.url<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp }<br><br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp return (<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &ltPost <br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp key={post.data.title}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp title={post.data.title}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp author={post.data.author}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp url={post.data.url}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp imageUrl={imageUrl}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp score={post.data.score}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp permalink={post.data.permalink}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp /&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp )<br>&nbsp &nbsp &nbsp &nbsp &nbsp }<br>&nbsp &nbsp &nbsp &nbsp &lt/div&gt<br>&nbsp &nbsp &nbsp &lt/MuiThemeProvider&gt<br>&nbsp &nbsp );<br>&nbsp }<br>}<br><br>export default App;</code><p class='codeComment'><em>// This won't do anything cool yet. But you can see that we are passing in all the relevant post data as properties on our Post component.  By using curly braces we are able to inject straight javascript logic directly into our jsx and return elements to be rendered as html.</em></p><p>At this point we are looping through our state array with a <code>.map</code> method and creating a post component for each post that exists in the post array. Which we can do directly in our return statement of our JSX.</p><p>Now let's use material-ui to render our post data:</p><h4 class='codeTitle'>/components/Post.js</h4><code class='codeBlock prettyprint linenums'>import React from 'react';<br>import Avatar from 'material-ui/Avatar';<br>import FlatButton from 'material-ui/FlatButton';<br>import { Card, CardHeader, CardMedia, CardText } from 'material-ui/Card';<br><br>const Post = (props) => {<br>&nbsp const cardStyle = {<br>&nbsp &nbsp width: '70%',<br>&nbsp &nbsp margin: '20px auto',<br>&nbsp }<br>&nbsp const headerStyle = {<br>&nbsp &nbsp display: 'flex',<br>&nbsp &nbsp flexDirection: 'row',<br>&nbsp &nbsp justifyContent: 'center',<br>&nbsp &nbsp textAlign: 'left',<br>&nbsp &nbsp margin: '0 auto',<br>&nbsp &nbsp backgroundColor: '#222222',<br>&nbsp }<br>&nbsp const titleStyle = {<br>&nbsp &nbsp fontSize: '120%',<br>&nbsp &nbsp color: '#ffffff',<br>&nbsp }<br>&nbsp const subtitleStyle = {<br>&nbsp &nbsp color: '#bcbcbc',<br>&nbsp }<br>&nbsp const linkStyle = {<br>&nbsp &nbsp textDecoration: 'none',<br>&nbsp }<br><br>&nbsp return (<br>&nbsp &nbsp &ltCard style={cardStyle} /&gt<br>&nbsp &nbsp &nbsp &lta href={url} target='_blank' style={linkStyle}&gt<br>&nbsp &nbsp &nbsp &nbsp &ltCardHeader<br>&nbsp &nbsp &nbsp &nbsp &nbsp style={headerStyle}<br>&nbsp &nbsp &nbsp &nbsp &nbsp title={title}<br>&nbsp &nbsp &nbsp &nbsp &nbsp titleStyle={titleStyle}<br>&nbsp &nbsp &nbsp &nbsp &nbsp subtitle={author}<br>&nbsp &nbsp &nbsp &nbsp &nbsp subtitleStyle={subtitleStyle}<br>&nbsp &nbsp &nbsp &nbsp &nbsp avatar={<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &ltAvatar<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp size={40}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp style={{ fontSize: '80%' }}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &lt<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp {score}<br>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &lt/Avatar&gt<br>&nbsp &nbsp &nbsp &nbsp &nbsp }<br>&nbsp &nbsp &nbsp &nbsp /&gt<br>&nbsp &nbsp &nbsp &lt/a&gt<br>&nbsp &nbsp &nbsp &ltCardMedia&gt<br>&nbsp &nbsp &nbsp &nbsp &ltimg src={imageUrl} alt={`${imageUrl} preview`} /&gt<br>&nbsp &nbsp &nbsp &lt/CardMedia&gt<br>&nbsp &nbsp &nbsp &ltCardText&gt<br>&nbsp &nbsp &nbsp &nbsp &ltFlatButton<br>&nbsp &nbsp &nbsp &nbsp &nbsp label='Comments'<br>&nbsp &nbsp &nbsp &nbsp /&gt<br>&nbsp &nbsp &nbsp &lt/CardText&gt<br>&nbsp &nbsp  &lt/Card&gt<br>&nbsp )<br>}<br><br>export default PostCard</code><p class='codeComment'><em>// You can see that we have created some styling objects to go along with our material ui components.  These add minimal styling and color adjustments.  Feel free to play around with these and try different styles for your UI.</em></p><p>With our props passed into our component we can iterate through our state array and create a seperate component for each post we receive in our fetch request from reddit, and this is what we see: </p><img class='screenshot' src='../asset/screenshots/3/rendered-posts.png'><div class='divider'></div><h3 class='contentHeading'>What We've Accomplished...</h3><p>We were able to accomplish a couple things:</p><ul class='articleList'><li>We set up a project with create-react-app.</li><li>We created a component that fetched data from reddit.com.</li><li>We created a component to display posts using material-ui.</li></ul><p>Next we will create a component for displaying comments and implementing a 'next' button to automatically grab posts and comment data.</p>"
}